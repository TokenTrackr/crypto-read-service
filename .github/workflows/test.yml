name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Build and run tests (skip OWASP)
        run: ./mvnw clean verify -Ddependency-check.skip=true

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.organization=tokentrackr \
            -Dsonar.projectKey=TokenTrackr_crypto-read-service \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN

  docker-build-and-push:
    needs: build-and-analyze
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Build JAR
        run: ./mvnw clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push Docker image with short SHA tag
        id: build-push
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/crypto-read-service:${SHORT_SHA}
          echo "Building and pushing image: $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .
          docker push "$IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Set output image name
        id: set-image
        run: echo "image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

  deploy-to-aks:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: TokenTrackrRG
          cluster-name: TokenTrackrCluster

      - name: Render k8s manifest
        run: |
          IMAGE_NAME=${{ needs.docker-build-and-push.outputs.image }}
          echo "Using image: $IMAGE_NAME"
          envsubst '${IMAGE_NAME}' < k8s/crypto-read-service.yaml > k8s/crypto-read-service.generated.yaml
          echo "Generated manifest preview:"
          cat k8s/crypto-read-service.generated.yaml | grep -A 5 'image:'

      - name: kubectl apply
        run: |
          kubectl apply -f k8s/crypto-read-service.generated.yaml
