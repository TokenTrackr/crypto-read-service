name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Build and run tests (skip OWASP)
        run: ./mvnw clean verify -Ddependency-check.skip=true

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.organization=tokentrackr \
            -Dsonar.projectKey=TokenTrackr_crypto-read-service \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN

  docker-build-and-push:
    needs: build-and-analyze
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Build JAR
        run: ./mvnw clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push Docker image
        id: build-push
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/crypto-read-service:${SHORT_SHA}
          echo "Building and pushing image: $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .
          docker push "$IMAGE_NAME"

      - name: Set output image tag
        id: set-tag
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "image-tag=${SHORT_SHA}" >> $GITHUB_OUTPUT

  deploy-to-aks:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: TokenTrackrRG
          cluster-name: TokenTrackrCluster

      - name: Verify image tag from previous job
        run: |
          echo "Image tag from previous job: ${{ needs.docker-build-and-push.outputs.image-tag }}"
          if [ -z "${{ needs.docker-build-and-push.outputs.image-tag }}" ]; then
            echo "❌ ERROR: Image tag is empty!"
            exit 1
          fi

      - name: Render and Apply K8s Manifest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG: ${{ needs.docker-build-and-push.outputs.image-tag }}
        run: |
          IMAGE_NAME="$DOCKER_USERNAME/crypto-read-service:$IMAGE_TAG"
          echo "Full image name: $IMAGE_NAME"
          
          if [ ! -f "k8s/crypto-read-service.yaml" ]; then
            echo "❌ ERROR: Template file missing!"
            ls -la k8s/
            exit 1
          fi
      
          sed "s|\${IMAGE_NAME}|$IMAGE_NAME|g" k8s/crypto-read-service.yaml > k8s/crypto-read-service.generated.yaml
          echo "=== Generated YAML ==="
          cat k8s/crypto-read-service.generated.yaml
      
          if grep -q '\${IMAGE_NAME}' k8s/crypto-read-service.generated.yaml; then
            echo "❌ ERROR: Variable substitution failed!"
            exit 1
          fi
      
          kubectl apply -f k8s/crypto-read-service.generated.yaml --dry-run=server --validate=true
          kubectl apply -f k8s/crypto-read-service.generated.yaml
